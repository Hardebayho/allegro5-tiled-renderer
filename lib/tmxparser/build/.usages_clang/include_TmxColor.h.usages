22 serialization::archive 15 0 0 0 0 85 /home/smallwondertech/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/lib/tmxparser 91 /home/smallwondertech/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/lib/tmxparser/build 0 0 222 0 0 0 79 //----------------------------------------------------------------------------- 1 1 1 80 18446744073709551615 13 // TmxColor.h 2 1 2 14 18446744073709551615 2 // 3 1 3 3 18446744073709551615 42 // Copyright (c) 2017, Guillaume Bertholon 4 1 4 43 18446744073709551615 23 // All rights reserved. 5 1 5 24 18446744073709551615 2 // 6 1 6 3 18446744073709551615 69 // Redistribution and use in source and binary forms, with or without 7 1 7 70 18446744073709551615 78 // modification, are permitted provided that the following conditions are met: 8 1 8 79 18446744073709551615 68 //  * Redistributions of source code must retain the above copyright 9 1 9 69 18446744073709551615 67 //    notice, this list of conditions and the following disclaimer. 10 1 10 68 18446744073709551615 71 //  * Redistributions in binary form must reproduce the above copyright 11 1 11 72 18446744073709551615 73 //    notice, this list of conditions and the following disclaimer in the 12 1 12 74 18446744073709551615 74 //    documentation and/or other materials provided with the distribution. 13 1 13 75 18446744073709551615 2 // 14 1 14 3 18446744073709551615 82 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 15 1 15 83 18446744073709551615 80 // ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 16 1 16 81 18446744073709551615 73 // WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 17 1 17 74 18446744073709551615 62 // DISCLAIMED. IN NO EVENT SHALL TAMIR ATIAS BE LIABLE FOR ANY 18 1 18 63 18446744073709551615 77 // DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 19 1 19 78 18446744073709551615 79 // (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 20 1 20 80 18446744073709551615 78 // LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 21 1 21 79 18446744073709551615 77 // ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 22 1 22 78 18446744073709551615 80 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 23 1 23 81 18446744073709551615 63 // SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 24 1 24 64 18446744073709551615 2 // 25 1 25 3 18446744073709551615 30 // Author: Guillaume Bertholon 26 1 26 31 18446744073709551615 79 //----------------------------------------------------------------------------- 27 1 27 80 18446744073709551615 1 # 28 1 28 2 18446744073709551615 6 pragma 28 2 28 8 18446744073709551615 4 once 28 9 28 13 18446744073709551615 1 # 30 1 30 2 18446744073709551615 7 include 30 2 30 9 18446744073709551615 1 < 30 10 30 11 18446744073709551615 6 string 30 11 30 17 18446744073709551615 1 > 30 17 30 18 18446744073709551615 1 # 31 1 31 2 18446744073709551615 7 include 31 2 31 9 18446744073709551615 1 < 31 10 31 11 18446744073709551615 7 cstdint 31 11 31 18 18446744073709551615 1 > 31 18 31 19 18446744073709551615 9 namespace 33 1 33 10 18446744073709551615 3 Tmx 33 11 33 14 0 1 { 34 1 34 2 18446744073709551615 75 //------------------------------------------------------------------------- 35 5 35 80 18446744073709551615 55 /// A class used for storing information about a color. 36 5 36 60 18446744073709551615 75 //------------------------------------------------------------------------- 37 5 37 80 18446744073709551615 5 class 38 5 38 10 18446744073709551615 5 Color 38 11 38 16 1 1 { 39 5 39 6 18446744073709551615 6 public 40 5 40 11 18446744073709551615 1 : 40 11 40 12 18446744073709551615 60 /// Default constructor for a fully transparent black color. 41 9 41 69 18446744073709551615 5 Color 42 9 42 14 1 1 ( 42 14 42 15 1 1 ) 42 15 42 16 1 1 ; 42 16 42 17 18446744073709551615 59 /// Initialize the color with a 32 bit ARGB representation. 44 9 44 68 18446744073709551615 5 Color 45 9 45 14 1 1 ( 45 14 45 15 1 8 uint32_t 45 15 45 23 2 5 color 45 24 45 29 3 1 ) 45 29 45 30 1 1 ; 45 30 45 31 18446744073709551615 77 /// Initialize the color with a red, green, blue and optionally alpha values. 47 9 47 86 18446744073709551615 5 Color 48 9 48 14 1 1 ( 48 14 48 15 1 7 uint8_t 48 15 48 22 4 1 r 48 23 48 24 5 1 , 48 24 48 25 1 7 uint8_t 48 26 48 33 4 1 g 48 34 48 35 6 1 , 48 35 48 36 1 7 uint8_t 48 37 48 44 4 1 b 48 45 48 46 7 1 , 48 46 48 47 1 7 uint8_t 48 48 48 55 4 1 a 48 56 48 57 8 1 = 48 58 48 59 18446744073709551615 3 255 48 60 48 63 18446744073709551615 1 ) 48 63 48 64 1 1 ; 48 64 48 65 18446744073709551615 103 /// Initialize a color from a string hexadecimal representation in the format "#AARRGGBB" or "#RRGGBB". 50 9 50 112 18446744073709551615 8 explicit 51 9 51 17 18446744073709551615 5 Color 51 18 51 23 1 1 ( 51 23 51 24 1 5 const 51 24 51 29 18446744073709551615 3 std 51 30 51 33 9 2 :: 51 33 51 35 18446744073709551615 6 string 51 35 51 41 10 1 & 51 41 51 42 18446744073709551615 3 str 51 43 51 46 11 1 ) 51 46 51 47 1 1 ; 51 47 51 48 18446744073709551615 1 ~ 53 9 53 10 18446744073709551615 5 Color 53 10 53 15 1 1 ( 53 15 53 16 18446744073709551615 1 ) 53 16 53 17 18446744073709551615 1 ; 53 17 53 18 18446744073709551615 29 /// Default copy constructor. 55 9 55 38 18446744073709551615 5 Color 56 9 56 14 1 1 ( 56 14 56 15 1 5 const 56 15 56 20 18446744073709551615 5 Color 56 21 56 26 1 1 & 56 26 56 27 18446744073709551615 1 ) 56 27 56 28 1 1 = 56 29 56 30 1 7 default 56 31 56 38 18446744073709551615 1 ; 56 38 56 39 18446744073709551615 31 /// Default asignment operator. 58 9 58 40 18446744073709551615 5 Color 59 9 59 14 1 1 & 59 14 59 15 12 8 operator 59 16 59 24 12 1 = 59 24 59 25 12 1 ( 59 25 59 26 12 5 const 59 26 59 31 18446744073709551615 5 Color 59 32 59 37 1 1 & 59 37 59 38 18446744073709551615 1 ) 59 38 59 39 12 1 = 59 40 59 41 12 7 default 59 42 59 49 18446744073709551615 1 ; 59 49 59 50 18446744073709551615 60 /// Check if two colors have the exact same four components. 61 9 61 69 18446744073709551615 4 bool 62 9 62 13 18446744073709551615 8 operator 62 14 62 22 13 2 == 62 22 62 24 13 1 ( 62 24 62 25 13 5 const 62 25 62 30 18446744073709551615 5 Color 62 31 62 36 1 1 & 62 36 62 37 18446744073709551615 1 o 62 38 62 39 14 1 ) 62 39 62 40 13 1 { 62 41 62 42 18446744073709551615 6 return 62 43 62 49 18446744073709551615 5 color 62 50 62 55 15 2 == 62 56 62 58 18446744073709551615 1 o 62 59 62 60 14 1 . 62 60 62 61 18446744073709551615 5 color 62 61 62 66 15 1 ; 62 66 62 67 18446744073709551615 1 } 62 68 62 69 18446744073709551615 38 /// Check if two colors are different. 64 9 64 47 18446744073709551615 4 bool 65 9 65 13 18446744073709551615 8 operator 65 14 65 22 16 2 != 65 22 65 24 16 1 ( 65 24 65 25 16 5 const 65 25 65 30 18446744073709551615 5 Color 65 31 65 36 1 1 & 65 36 65 37 18446744073709551615 1 o 65 38 65 39 17 1 ) 65 39 65 40 16 1 { 65 41 65 42 18446744073709551615 6 return 65 43 65 49 18446744073709551615 5 color 65 50 65 55 15 2 != 65 56 65 58 18446744073709551615 1 o 65 59 65 60 17 1 . 65 60 65 61 18446744073709551615 5 color 65 61 65 66 15 1 ; 65 66 65 67 18446744073709551615 1 } 65 68 65 69 18446744073709551615 41 /// Get the alpha component of the color. 67 9 67 50 18446744073709551615 7 uint8_t 68 9 68 16 4 8 GetAlpha 68 17 68 25 18 1 ( 68 25 68 26 18 1 ) 68 26 68 27 18 5 const 68 28 68 33 18446744073709551615 1 ; 68 33 68 34 18446744073709551615 39 /// Get the red component of the color. 70 9 70 48 18446744073709551615 7 uint8_t 71 9 71 16 4 6 GetRed 71 17 71 23 19 1 ( 71 23 71 24 19 1 ) 71 24 71 25 19 5 const 71 26 71 31 18446744073709551615 1 ; 71 31 71 32 18446744073709551615 41 /// Get the green component of the color. 73 9 73 50 18446744073709551615 7 uint8_t 74 9 74 16 4 8 GetGreen 74 17 74 25 20 1 ( 74 25 74 26 20 1 ) 74 26 74 27 20 5 const 74 28 74 33 18446744073709551615 1 ; 74 33 74 34 18446744073709551615 40 /// Get the blue component of the color. 76 9 76 49 18446744073709551615 7 uint8_t 77 9 77 16 4 7 GetBlue 77 17 77 24 21 1 ( 77 24 77 25 21 1 ) 77 25 77 26 21 5 const 77 27 77 32 18446744073709551615 1 ; 77 32 77 33 18446744073709551615 72 /// Return true if the color is fully transparent (ie alpha value is 0). 79 9 79 81 18446744073709551615 4 bool 80 9 80 13 18446744073709551615 13 IsTransparent 80 14 80 27 22 1 ( 80 27 80 28 22 1 ) 80 28 80 29 22 5 const 80 30 80 35 18446744073709551615 1 ; 80 35 80 36 18446744073709551615 135 /// Get the 32 bits integer representing the color. The 8 highest bits are for the alpha channel, then the red, the green and the blue. 82 9 82 144 18446744073709551615 8 uint32_t 83 9 83 17 2 5 ToInt 83 18 83 23 23 1 ( 83 23 83 24 23 1 ) 83 24 83 25 23 5 const 83 26 83 31 18446744073709551615 1 { 83 32 83 33 18446744073709551615 6 return 83 34 83 40 18446744073709551615 5 color 83 41 83 46 15 1 ; 83 46 83 47 18446744073709551615 1 } 83 48 83 49 18446744073709551615 71 /// Get a string representation of the color in the format "#AARRGGBB". 85 9 85 80 18446744073709551615 3 std 86 9 86 12 9 2 :: 86 12 86 14 24 6 string 86 14 86 20 10 8 ToString 86 21 86 29 24 1 ( 86 29 86 30 24 1 ) 86 30 86 31 24 5 const 86 32 86 37 18446744073709551615 1 ; 86 37 86 38 18446744073709551615 7 private 88 5 88 12 18446744073709551615 1 : 88 12 88 13 18446744073709551615 8 uint32_t 89 9 89 17 2 5 color 89 18 89 23 15 1 ; 89 23 89 24 18446744073709551615 1 } 90 5 90 6 18446744073709551615 1 ; 90 6 90 7 18446744073709551615 1 } 91 1 91 2 18446744073709551615 0 0 25 0 0 0 22 0 0 1 3 0 3 Tmx 4 1 3 0 9 Color:Tmx 20 1 3 0 8 uint32_t 10 1 3 0 110 45:24:/home/smallwondertech/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/lib/tmxparser/include/TmxColor.h 20 1 3 0 7 uint8_t 10 1 3 0 110 48:23:/home/smallwondertech/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/lib/tmxparser/include/TmxColor.h 10 1 3 0 110 48:34:/home/smallwondertech/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/lib/tmxparser/include/TmxColor.h 10 1 3 0 110 48:45:/home/smallwondertech/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/lib/tmxparser/include/TmxColor.h 10 1 3 0 110 48:56:/home/smallwondertech/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/lib/tmxparser/include/TmxColor.h 22 1 3 0 3 std 20 1 3 0 18 string:__cxx11:std 10 1 3 0 110 51:43:/home/smallwondertech/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/lib/tmxparser/include/TmxColor.h 21 1 3 0 19 operator=:Color:Tmx 21 1 3 0 20 operator==:Color:Tmx 10 1 3 0 110 62:38:/home/smallwondertech/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/lib/tmxparser/include/TmxColor.h 6 1 3 0 15 color:Color:Tmx 21 1 3 0 20 operator!=:Color:Tmx 10 1 3 0 110 65:38:/home/smallwondertech/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/lib/tmxparser/include/TmxColor.h 21 1 3 0 18 GetAlpha:Color:Tmx 21 1 3 0 16 GetRed:Color:Tmx 21 1 3 0 18 GetGreen:Color:Tmx 21 1 3 0 17 GetBlue:Color:Tmx 21 1 3 0 23 IsTransparent:Color:Tmx 21 1 3 0 15 ToInt:Color:Tmx 21 1 3 0 18 ToString:Color:Tmx 0 0 1 0 0 0 104 /home/smallwondertech/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/lib/tmxparser/include/TmxColor.h 1571011912