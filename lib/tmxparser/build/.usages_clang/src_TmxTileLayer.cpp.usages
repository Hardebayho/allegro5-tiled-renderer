22 serialization::archive 15 0 0 0 0 76 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser 82 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/build 0 0 1088 0 0 0 79 //----------------------------------------------------------------------------- 1 1 1 80 18446744073709551615 39 // Copyright (c) 2010-2014, Tamir Atias 2 1 2 40 18446744073709551615 23 // All rights reserved. 3 1 3 24 18446744073709551615 2 // 4 1 4 3 18446744073709551615 69 // Redistribution and use in source and binary forms, with or without 5 1 5 70 18446744073709551615 78 // modification, are permitted provided that the following conditions are met: 6 1 6 79 18446744073709551615 68 //  * Redistributions of source code must retain the above copyright 7 1 7 69 18446744073709551615 67 //    notice, this list of conditions and the following disclaimer. 8 1 8 68 18446744073709551615 71 //  * Redistributions in binary form must reproduce the above copyright 9 1 9 72 18446744073709551615 73 //    notice, this list of conditions and the following disclaimer in the 10 1 10 74 18446744073709551615 74 //    documentation and/or other materials provided with the distribution. 11 1 11 75 18446744073709551615 2 // 12 1 12 3 18446744073709551615 82 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 13 1 13 83 18446744073709551615 80 // ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 14 1 14 81 18446744073709551615 73 // WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 15 1 15 74 18446744073709551615 62 // DISCLAIMED. IN NO EVENT SHALL TAMIR ATIAS BE LIABLE FOR ANY 16 1 16 63 18446744073709551615 77 // DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 17 1 17 78 18446744073709551615 79 // (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 18 1 18 80 18446744073709551615 78 // LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 19 1 19 79 18446744073709551615 77 // ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 20 1 20 78 18446744073709551615 80 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 21 1 21 81 18446744073709551615 63 // SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 22 1 22 64 18446744073709551615 79 //----------------------------------------------------------------------------- 23 1 23 80 18446744073709551615 1 # 24 1 24 2 18446744073709551615 7 include 24 2 24 9 18446744073709551615 1 < 24 10 24 11 18446744073709551615 8 tinyxml2 24 11 24 19 18446744073709551615 1 . 24 19 24 20 18446744073709551615 1 h 24 20 24 21 18446744073709551615 1 > 24 21 24 22 18446744073709551615 1 # 25 1 25 2 18446744073709551615 7 include 25 2 25 9 18446744073709551615 1 < 25 10 25 11 18446744073709551615 9 algorithm 25 11 25 20 18446744073709551615 1 > 25 20 25 21 18446744073709551615 1 # 27 1 27 2 18446744073709551615 5 ifdef 27 2 27 7 18446744073709551615 9 USE_MINIZ 27 8 27 17 18446744073709551615 1 # 28 1 28 2 18446744073709551615 6 define 28 2 28 8 18446744073709551615 22 MINIZ_HEADER_FILE_ONLY 28 9 28 31 18446744073709551615 1 # 29 1 29 2 18446744073709551615 7 include 29 2 29 9 18446744073709551615 9 "miniz.c" 29 10 29 19 18446744073709551615 1 # 30 1 30 2 18446744073709551615 4 else 30 2 30 6 18446744073709551615 1 # 31 1 31 2 18446744073709551615 7 include 31 2 31 9 18446744073709551615 1 < 31 10 31 11 18446744073709551615 4 zlib 31 11 31 15 18446744073709551615 1 . 31 15 31 16 18446744073709551615 1 h 31 16 31 17 18446744073709551615 1 > 31 17 31 18 18446744073709551615 1 # 32 1 32 2 18446744073709551615 5 endif 32 2 32 7 18446744073709551615 1 # 34 1 34 2 18446744073709551615 7 include 34 2 34 9 18446744073709551615 1 < 34 10 34 11 18446744073709551615 6 stdlib 34 11 34 17 18446744073709551615 1 . 34 17 34 18 18446744073709551615 1 h 34 18 34 19 18446744073709551615 1 > 34 19 34 20 18446744073709551615 1 # 35 1 35 2 18446744073709551615 7 include 35 2 35 9 18446744073709551615 1 < 35 10 35 11 18446744073709551615 5 stdio 35 11 35 16 18446744073709551615 1 . 35 16 35 17 18446744073709551615 1 h 35 17 35 18 18446744073709551615 1 > 35 18 35 19 18446744073709551615 1 # 37 1 37 2 18446744073709551615 7 include 37 2 37 9 18446744073709551615 12 "TmxLayer.h" 37 10 37 22 18446744073709551615 1 # 38 1 38 2 18446744073709551615 7 include 38 2 38 9 18446744073709551615 16 "TmxTileLayer.h" 38 10 38 26 18446744073709551615 1 # 39 1 39 2 18446744073709551615 7 include 39 2 39 9 18446744073709551615 11 "TmxUtil.h" 39 10 39 21 18446744073709551615 1 # 40 1 40 2 18446744073709551615 7 include 40 2 40 9 18446744073709551615 10 "TmxMap.h" 40 10 40 20 18446744073709551615 1 # 41 1 41 2 18446744073709551615 7 include 41 2 41 9 18446744073709551615 14 "TmxTileset.h" 41 10 41 24 18446744073709551615 9 namespace 43 1 43 10 18446744073709551615 3 Tmx 43 11 43 14 0 1 { 44 1 44 2 18446744073709551615 9 TileLayer 45 5 45 14 1 2 :: 45 14 45 16 1 9 TileLayer 45 16 45 25 1 1 ( 45 25 45 26 1 5 const 45 26 45 31 18446744073709551615 3 Map 45 32 45 35 2 1 * 45 36 45 37 18446744073709551615 4 _map 45 37 45 41 3 1 ) 45 41 45 42 1 1 : 46 9 46 10 1 5 Layer 46 11 46 16 4 1 ( 46 16 46 17 4 4 _map 46 17 46 21 3 1 , 46 21 46 22 4 3 std 46 23 46 26 5 2 :: 46 26 46 28 6 6 string 46 28 46 34 7 1 ( 46 34 46 35 6 1 ) 46 35 46 36 6 1 , 46 36 46 37 4 1 0 46 38 46 39 18446744073709551615 1 , 46 39 46 40 4 1 0 46 41 46 42 18446744073709551615 1 , 46 42 46 43 4 4 _map 46 44 46 48 3 2 -> 46 48 46 50 8 8 GetWidth 46 50 46 58 8 1 ( 46 58 46 59 8 1 ) 46 59 46 60 8 1 , 46 60 46 61 4 4 _map 46 62 46 66 3 2 -> 46 66 46 68 9 9 GetHeight 46 68 46 77 9 1 ( 46 77 46 78 9 1 ) 46 78 46 79 9 1 , 46 79 46 80 4 4 1.0f 46 81 46 85 18446744073709551615 1 , 46 85 46 86 4 4 true 46 87 46 91 18446744073709551615 1 , 46 91 46 92 4 18 TMX_LAYERTYPE_TILE 46 93 46 111 10 1 ) 46 111 46 112 4 1 , 47 9 47 10 1 8 tile_map 47 11 47 19 11 1 ( 47 19 47 20 1 4 NULL 47 20 47 24 1 1 ) 47 24 47 25 1 63 // Set the map to null to specify that it is not yet allocated. 47 27 47 90 18446744073709551615 1 , 48 9 48 10 1 8 encoding 48 11 48 19 12 1 ( 48 19 48 20 1 16 TMX_ENCODING_XML 48 20 48 36 13 1 ) 48 36 48 37 1 1 , 49 9 49 10 1 11 compression 49 11 49 22 14 1 ( 49 22 49 23 1 20 TMX_COMPRESSION_NONE 49 23 49 43 15 1 ) 49 43 49 44 1 1 { 50 5 50 6 18446744073709551615 1 } 51 5 51 6 18446744073709551615 9 TileLayer 53 5 53 14 1 2 :: 53 14 53 16 18446744073709551615 1 ~ 53 16 53 17 18446744073709551615 9 TileLayer 53 17 53 26 1 1 ( 53 26 53 27 18446744073709551615 1 ) 53 27 53 28 18446744073709551615 1 { 54 5 54 6 18446744073709551615 59 // If the tile map is allocated, delete it from the memory. 55 9 55 68 18446744073709551615 2 if 56 9 56 11 18446744073709551615 1 ( 56 12 56 13 18446744073709551615 8 tile_map 56 13 56 21 11 1 ) 56 21 56 22 18446744073709551615 1 { 57 9 57 10 18446744073709551615 6 delete 58 13 58 19 18446744073709551615 1 [ 58 20 58 21 18446744073709551615 1 ] 58 21 58 22 18446744073709551615 8 tile_map 58 23 58 31 11 1 ; 58 31 58 32 18446744073709551615 8 tile_map 59 13 59 21 11 1 = 59 22 59 23 18446744073709551615 4 NULL 59 24 59 28 18446744073709551615 1 ; 59 28 59 29 18446744073709551615 1 } 60 9 60 10 18446744073709551615 1 } 61 5 61 6 18446744073709551615 4 void 63 5 63 9 18446744073709551615 9 TileLayer 63 10 63 19 1 2 :: 63 19 63 21 16 5 Parse 63 21 63 26 16 1 ( 63 26 63 27 16 5 const 63 27 63 32 18446744073709551615 8 tinyxml2 63 33 63 41 17 2 :: 63 41 63 43 18446744073709551615 7 XMLNode 63 43 63 50 18 1 * 63 51 63 52 18446744073709551615 13 tileLayerNode 63 52 63 65 19 1 ) 63 65 63 66 16 1 { 64 5 64 6 18446744073709551615 5 const 65 9 65 14 18446744073709551615 8 tinyxml2 65 15 65 23 17 2 :: 65 23 65 25 18446744073709551615 10 XMLElement 65 25 65 35 20 1 * 65 36 65 37 18446744073709551615 13 tileLayerElem 65 37 65 50 21 1 = 65 51 65 52 18446744073709551615 13 tileLayerNode 65 53 65 66 19 2 -> 65 66 65 68 22 9 ToElement 65 68 65 77 22 1 ( 65 77 65 78 22 1 ) 65 78 65 79 22 1 ; 65 79 65 80 18446744073709551615 23 // Read the attributes. 67 9 67 32 18446744073709551615 4 name 68 9 68 13 23 1 = 68 14 68 15 24 13 tileLayerElem 68 16 68 29 21 2 -> 68 29 68 31 25 9 Attribute 68 31 68 40 25 1 ( 68 40 68 41 25 6 "name" 68 41 68 47 18446744073709551615 1 ) 68 47 68 48 25 1 ; 68 48 68 49 18446744073709551615 13 tileLayerElem 70 9 70 22 21 2 -> 70 22 70 24 26 17 QueryIntAttribute 70 24 70 41 26 1 ( 70 41 70 42 26 3 "x" 70 42 70 45 18446744073709551615 1 , 70 45 70 46 26 1 & 70 47 70 48 18446744073709551615 1 x 70 48 70 49 27 1 ) 70 49 70 50 26 1 ; 70 50 70 51 18446744073709551615 13 tileLayerElem 71 9 71 22 21 2 -> 71 22 71 24 26 17 QueryIntAttribute 71 24 71 41 26 1 ( 71 41 71 42 26 3 "y" 71 42 71 45 18446744073709551615 1 , 71 45 71 46 26 1 & 71 47 71 48 18446744073709551615 1 y 71 48 71 49 28 1 ) 71 49 71 50 26 1 ; 71 50 71 51 18446744073709551615 13 tileLayerElem 73 9 73 22 21 2 -> 73 22 73 24 29 19 QueryFloatAttribute 73 24 73 43 29 1 ( 73 43 73 44 29 9 "opacity" 73 44 73 53 18446744073709551615 1 , 73 53 73 54 29 1 & 73 55 73 56 18446744073709551615 7 opacity 73 56 73 63 30 1 ) 73 63 73 64 29 1 ; 73 64 73 65 18446744073709551615 13 tileLayerElem 74 9 74 22 21 2 -> 74 22 74 24 31 18 QueryBoolAttribute 74 24 74 42 31 1 ( 74 42 74 43 31 9 "visible" 74 43 74 52 18446744073709551615 1 , 74 52 74 53 31 1 & 74 54 74 55 18446744073709551615 7 visible 74 55 74 62 32 1 ) 74 62 74 63 31 1 ; 74 63 74 64 18446744073709551615 23 // Read the properties. 76 9 76 32 18446744073709551615 5 const 77 9 77 14 18446744073709551615 8 tinyxml2 77 15 77 23 17 2 :: 77 23 77 25 18446744073709551615 7 XMLNode 77 25 77 32 18 1 * 77 33 77 34 18446744073709551615 14 propertiesNode 77 34 77 48 33 1 = 77 49 77 50 18446744073709551615 13 tileLayerNode 77 51 77 64 19 2 -> 77 64 77 66 34 17 FirstChildElement 77 66 77 83 34 1 ( 77 83 77 84 34 12 "properties" 77 84 77 96 18446744073709551615 1 ) 77 96 77 97 34 1 ; 77 97 77 98 18446744073709551615 2 if 78 9 78 11 18446744073709551615 1 ( 78 12 78 13 18446744073709551615 14 propertiesNode 78 13 78 27 33 1 ) 78 27 78 28 18446744073709551615 1 { 79 9 79 10 18446744073709551615 10 properties 80 13 80 23 35 1 . 80 23 80 24 36 5 Parse 80 24 80 29 36 1 ( 80 29 80 30 36 14 propertiesNode 80 30 80 44 33 1 ) 80 44 80 45 36 1 ; 80 45 80 46 18446744073709551615 1 } 81 9 81 10 18446744073709551615 41 // Allocate memory for reading the tiles. 83 9 83 50 18446744073709551615 8 tile_map 84 9 84 17 11 1 = 84 18 84 19 18446744073709551615 3 new 84 20 84 23 18446744073709551615 7 MapTile 84 24 84 31 37 1 [ 84 31 84 32 18446744073709551615 5 width 84 32 84 37 38 1 * 84 38 84 39 18446744073709551615 6 height 84 40 84 46 39 1 ] 84 46 84 47 18446744073709551615 1 ; 84 47 84 48 18446744073709551615 79 //const tinyxml2::XMLNode *dataNode = tileLayerNode->FirstChildElement("data"); 86 9 86 88 18446744073709551615 5 const 87 9 87 14 18446744073709551615 8 tinyxml2 87 15 87 23 17 2 :: 87 23 87 25 18446744073709551615 10 XMLElement 87 25 87 35 20 1 * 87 36 87 37 18446744073709551615 8 dataElem 87 37 87 45 40 1 = 87 46 87 47 18446744073709551615 13 tileLayerNode 87 48 87 61 19 2 -> 87 61 87 63 34 17 FirstChildElement 87 63 87 80 34 1 ( 87 80 87 81 34 6 "data" 87 81 87 87 18446744073709551615 1 ) 87 87 87 88 34 1 ; 87 88 87 89 18446744073709551615 5 const 89 9 89 14 18446744073709551615 4 char 89 15 89 19 18446744073709551615 1 * 89 20 89 21 18446744073709551615 11 encodingStr 89 21 89 32 41 1 = 89 33 89 34 18446744073709551615 8 dataElem 89 35 89 43 40 2 -> 89 43 89 45 25 9 Attribute 89 45 89 54 25 1 ( 89 54 89 55 25 10 "encoding" 89 55 89 65 18446744073709551615 1 ) 89 65 89 66 25 1 ; 89 66 89 67 18446744073709551615 5 const 90 9 90 14 18446744073709551615 4 char 90 15 90 19 18446744073709551615 1 * 90 20 90 21 18446744073709551615 14 compressionStr 90 21 90 35 42 1 = 90 36 90 37 18446744073709551615 8 dataElem 90 38 90 46 40 2 -> 90 46 90 48 25 9 Attribute 90 48 90 57 25 1 ( 90 57 90 58 25 13 "compression" 90 58 90 71 18446744073709551615 1 ) 90 71 90 72 25 1 ; 90 72 90 73 18446744073709551615 22 // Check for encoding. 92 9 92 31 18446744073709551615 2 if 93 9 93 11 18446744073709551615 1 ( 93 12 93 13 18446744073709551615 11 encodingStr 93 13 93 24 41 1 ) 93 24 93 25 18446744073709551615 1 { 94 9 94 10 18446744073709551615 2 if 95 13 95 15 18446744073709551615 1 ( 95 16 95 17 18446744073709551615 1 ! 95 17 95 18 18446744073709551615 6 strcmp 95 18 95 24 43 1 ( 95 24 95 25 43 11 encodingStr 95 25 95 36 41 1 , 95 36 95 37 43 8 "base64" 95 38 95 46 18446744073709551615 1 ) 95 46 95 47 43 1 ) 95 47 95 48 18446744073709551615 1 { 96 13 96 14 18446744073709551615 8 encoding 97 17 97 25 12 1 = 97 26 97 27 18446744073709551615 19 TMX_ENCODING_BASE64 97 28 97 47 44 1 ; 97 47 97 48 18446744073709551615 1 } 98 13 98 14 18446744073709551615 4 else 99 13 99 17 18446744073709551615 2 if 99 18 99 20 18446744073709551615 1 ( 99 21 99 22 18446744073709551615 1 ! 99 22 99 23 18446744073709551615 6 strcmp 99 23 99 29 43 1 ( 99 29 99 30 43 11 encodingStr 99 30 99 41 41 1 , 99 41 99 42 43 5 "csv" 99 43 99 48 18446744073709551615 1 ) 99 48 99 49 43 1 ) 99 49 99 50 18446744073709551615 1 { 100 13 100 14 18446744073709551615 8 encoding 101 17 101 25 12 1 = 101 26 101 27 18446744073709551615 16 TMX_ENCODING_CSV 101 28 101 44 45 1 ; 101 44 101 45 18446744073709551615 1 } 102 13 102 14 18446744073709551615 1 } 103 9 103 10 18446744073709551615 25 // Check for compression. 105 9 105 34 18446744073709551615 2 if 106 9 106 11 18446744073709551615 1 ( 106 12 106 13 18446744073709551615 14 compressionStr 106 13 106 27 42 1 ) 106 27 106 28 18446744073709551615 1 { 107 9 107 10 18446744073709551615 2 if 108 13 108 15 18446744073709551615 1 ( 108 16 108 17 18446744073709551615 1 ! 108 17 108 18 18446744073709551615 6 strcmp 108 18 108 24 43 1 ( 108 24 108 25 43 14 compressionStr 108 25 108 39 42 1 , 108 39 108 40 43 6 "gzip" 108 41 108 47 18446744073709551615 1 ) 108 47 108 48 43 1 ) 108 48 108 49 18446744073709551615 1 { 109 13 109 14 18446744073709551615 11 compression 110 17 110 28 14 1 = 110 29 110 30 18446744073709551615 20 TMX_COMPRESSION_GZIP 110 31 110 51 46 1 ; 110 51 110 52 18446744073709551615 1 } 111 13 111 14 18446744073709551615 4 else 112 13 112 17 18446744073709551615 2 if 112 18 112 20 18446744073709551615 1 ( 112 21 112 22 18446744073709551615 1 ! 112 22 112 23 18446744073709551615 6 strcmp 112 23 112 29 43 1 ( 112 29 112 30 43 14 compressionStr 112 30 112 44 42 1 , 112 44 112 45 43 6 "zlib" 112 46 112 52 18446744073709551615 1 ) 112 52 112 53 43 1 ) 112 53 112 54 18446744073709551615 1 { 113 13 113 14 18446744073709551615 11 compression 114 17 114 28 14 1 = 114 29 114 30 18446744073709551615 20 TMX_COMPRESSION_ZLIB 114 31 114 51 47 1 ; 114 51 114 52 18446744073709551615 1 } 115 13 115 14 18446744073709551615 1 } 116 9 116 10 18446744073709551615 10 // Decode. 118 9 118 19 18446744073709551615 6 switch 119 9 119 15 18446744073709551615 1 ( 119 16 119 17 18446744073709551615 8 encoding 119 17 119 25 12 1 ) 119 25 119 26 18446744073709551615 1 { 120 9 120 10 18446744073709551615 4 case 121 9 121 13 18446744073709551615 16 TMX_ENCODING_XML 121 14 121 30 13 1 : 121 30 121 31 18446744073709551615 8 ParseXML 122 13 122 21 48 1 ( 122 21 122 22 48 8 dataElem 122 22 122 30 40 1 ) 122 30 122 31 48 1 ; 122 31 122 32 18446744073709551615 5 break 123 13 123 18 18446744073709551615 1 ; 123 18 123 19 18446744073709551615 4 case 125 9 125 13 18446744073709551615 19 TMX_ENCODING_BASE64 125 14 125 33 44 1 : 125 33 125 34 18446744073709551615 11 ParseBase64 126 13 126 24 49 1 ( 126 24 126 25 49 8 dataElem 126 25 126 33 40 2 -> 126 33 126 35 50 7 GetText 126 35 126 42 50 1 ( 126 42 126 43 50 1 ) 126 43 126 44 50 1 ) 126 44 126 45 49 1 ; 126 45 126 46 18446744073709551615 5 break 127 13 127 18 18446744073709551615 1 ; 127 18 127 19 18446744073709551615 4 case 129 9 129 13 18446744073709551615 16 TMX_ENCODING_CSV 129 14 129 30 45 1 : 129 30 129 31 18446744073709551615 8 ParseCSV 130 13 130 21 51 1 ( 130 21 130 22 51 8 dataElem 130 22 130 30 40 2 -> 130 30 130 32 50 7 GetText 130 32 130 39 50 1 ( 130 39 130 40 50 1 ) 130 40 130 41 50 1 ) 130 41 130 42 51 1 ; 130 42 130 43 18446744073709551615 5 break 131 13 131 18 18446744073709551615 1 ; 131 18 131 19 18446744073709551615 1 } 132 9 132 10 18446744073709551615 1 } 133 5 133 6 18446744073709551615 4 void 135 5 135 9 18446744073709551615 9 TileLayer 135 10 135 19 1 2 :: 135 19 135 21 48 8 ParseXML 135 21 135 29 48 1 ( 135 29 135 30 48 5 const 135 30 135 35 18446744073709551615 8 tinyxml2 135 36 135 44 17 2 :: 135 44 135 46 18446744073709551615 7 XMLNode 135 46 135 53 18 1 * 135 54 135 55 18446744073709551615 8 dataNode 135 55 135 63 52 1 ) 135 63 135 64 48 1 { 136 5 136 6 18446744073709551615 5 const 137 9 137 14 18446744073709551615 8 tinyxml2 137 15 137 23 17 2 :: 137 23 137 25 18446744073709551615 7 XMLNode 137 25 137 32 18 1 * 137 33 137 34 18446744073709551615 8 tileNode 137 34 137 42 53 1 = 137 43 137 44 18446744073709551615 8 dataNode 137 45 137 53 52 2 -> 137 53 137 55 34 17 FirstChildElement 137 55 137 72 34 1 ( 137 72 137 73 34 6 "tile" 137 73 137 79 18446744073709551615 1 ) 137 79 137 80 34 1 ; 137 80 137 81 18446744073709551615 3 int 138 9 138 12 18446744073709551615 9 tileCount 138 13 138 22 54 1 = 138 23 138 24 18446744073709551615 1 0 138 25 138 26 18446744073709551615 1 ; 138 26 138 27 18446744073709551615 5 while 140 9 140 14 18446744073709551615 1 ( 140 15 140 16 18446744073709551615 8 tileNode 140 16 140 24 53 1 ) 140 24 140 25 18446744073709551615 1 { 141 9 141 10 18446744073709551615 5 const 142 13 142 18 18446744073709551615 8 tinyxml2 142 19 142 27 17 2 :: 142 27 142 29 18446744073709551615 10 XMLElement 142 29 142 39 20 1 * 142 40 142 41 18446744073709551615 8 tileElem 142 41 142 49 55 1 = 142 50 142 51 18446744073709551615 8 tileNode 142 52 142 60 53 2 -> 142 60 142 62 22 9 ToElement 142 62 142 71 22 1 ( 142 71 142 72 22 1 ) 142 72 142 73 22 1 ; 142 73 142 74 18446744073709551615 8 unsigned 144 13 144 21 18446744073709551615 3 gid 144 22 144 25 56 1 = 144 26 144 27 18446744073709551615 1 0 144 28 144 29 18446744073709551615 1 ; 144 29 144 30 18446744073709551615 34 // Read the Global-ID of the tile. 146 13 146 47 18446744073709551615 5 const 147 13 147 18 18446744073709551615 4 char 147 19 147 23 18446744073709551615 1 * 147 23 147 24 18446744073709551615 7 gidText 147 25 147 32 57 1 = 147 33 147 34 18446744073709551615 8 tileElem 147 35 147 43 55 2 -> 147 43 147 45 25 9 Attribute 147 45 147 54 25 1 ( 147 54 147 55 25 5 "gid" 147 55 147 60 18446744073709551615 1 ) 147 60 147 61 25 1 ; 147 61 147 62 18446744073709551615 26 // Convert to an unsigned. 149 13 149 39 18446744073709551615 6 sscanf 150 13 150 19 58 1 ( 150 19 150 20 58 7 gidText 150 20 150 27 57 1 , 150 27 150 28 58 4 "%u" 150 29 150 33 18446744073709551615 1 , 150 33 150 34 58 1 & 150 35 150 36 18446744073709551615 3 gid 150 36 150 39 56 1 ) 150 39 150 40 58 1 ; 150 40 150 41 18446744073709551615 26 // Find the tileset index. 152 13 152 39 18446744073709551615 5 const 153 13 153 18 18446744073709551615 3 int 153 19 153 22 18446744073709551615 12 tilesetIndex 153 23 153 35 59 1 = 153 36 153 37 18446744073709551615 3 map 153 38 153 41 60 2 -> 153 41 153 43 61 16 FindTilesetIndex 153 43 153 59 61 1 ( 153 59 153 60 61 3 gid 153 60 153 63 56 1 ) 153 63 153 64 61 1 ; 153 64 153 65 18446744073709551615 2 if 154 13 154 15 18446744073709551615 1 ( 154 16 154 17 18446744073709551615 12 tilesetIndex 154 17 154 29 59 2 != 154 30 154 32 18446744073709551615 1 - 154 33 154 34 18446744073709551615 1 1 154 34 154 35 18446744073709551615 1 ) 154 35 154 36 18446744073709551615 1 { 155 13 155 14 18446744073709551615 50 // If valid, set up the map tile with the tileset. 156 17 156 67 18446744073709551615 5 const 157 17 157 22 18446744073709551615 3 Tmx 157 23 157 26 0 2 :: 157 26 157 28 18446744073709551615 7 Tileset 157 28 157 35 62 1 * 157 35 157 36 18446744073709551615 7 tileset 157 37 157 44 63 1 = 157 45 157 46 18446744073709551615 3 map 157 47 157 50 60 2 -> 157 50 157 52 64 10 GetTileset 157 52 157 62 64 1 ( 157 62 157 63 64 12 tilesetIndex 157 63 157 75 59 1 ) 157 75 157 76 64 1 ; 157 76 157 77 18446744073709551615 8 tile_map 158 17 158 25 11 1 [ 158 25 158 26 18446744073709551615 9 tileCount 158 26 158 35 54 1 ] 158 35 158 36 18446744073709551615 1 = 158 37 158 38 65 7 MapTile 158 39 158 46 37 1 ( 158 46 158 47 37 3 gid 158 47 158 50 56 1 , 158 50 158 51 37 7 tileset 158 52 158 59 63 2 -> 158 59 158 61 66 11 GetFirstGid 158 61 158 72 66 1 ( 158 72 158 73 66 1 ) 158 73 158 74 66 1 , 158 74 158 75 37 12 tilesetIndex 158 76 158 88 59 1 ) 158 88 158 89 37 1 ; 158 89 158 90 18446744073709551615 1 } 159 13 159 14 18446744073709551615 4 else 160 13 160 17 18446744073709551615 1 { 161 13 161 14 18446744073709551615 27 // Otherwise, make it null. 162 17 162 44 18446744073709551615 8 tile_map 163 17 163 25 11 1 [ 163 25 163 26 18446744073709551615 9 tileCount 163 26 163 35 54 1 ] 163 35 163 36 18446744073709551615 1 = 163 37 163 38 65 7 MapTile 163 39 163 46 37 1 ( 163 46 163 47 37 3 gid 163 47 163 50 56 1 , 163 50 163 51 37 1 0 163 52 163 53 18446744073709551615 1 , 163 53 163 54 37 1 - 163 55 163 56 18446744073709551615 1 1 163 56 163 57 18446744073709551615 1 ) 163 57 163 58 37 1 ; 163 58 163 59 18446744073709551615 1 } 164 13 164 14 18446744073709551615 69 //tileNode = dataNode->IterateChildren("tile", tileNode); FIXME MAYBE 166 13 166 82 18446744073709551615 8 tileNode 167 13 167 21 53 1 = 167 22 167 23 18446744073709551615 8 tileNode 167 24 167 32 53 2 -> 167 32 167 34 67 18 NextSiblingElement 167 34 167 52 67 1 ( 167 52 167 53 67 6 "tile" 167 53 167 59 18446744073709551615 1 ) 167 59 167 60 67 1 ; 167 60 167 61 18446744073709551615 9 tileCount 168 13 168 22 54 2 ++ 168 22 168 24 18446744073709551615 1 ; 168 24 168 25 18446744073709551615 1 } 169 9 169 10 18446744073709551615 1 } 170 5 170 6 18446744073709551615 4 void 172 5 172 9 18446744073709551615 9 TileLayer 172 10 172 19 1 2 :: 172 19 172 21 49 11 ParseBase64 172 21 172 32 49 1 ( 172 32 172 33 49 5 const 172 33 172 38 18446744073709551615 3 std 172 39 172 42 5 2 :: 172 42 172 44 18446744073709551615 6 string 172 44 172 50 7 1 & 172 51 172 52 18446744073709551615 9 innerText 172 52 172 61 68 1 ) 172 61 172 62 49 1 { 173 5 173 6 18446744073709551615 3 std 174 6 174 9 5 2 :: 174 9 174 11 18446744073709551615 6 string 174 11 174 17 7 8 testText 174 18 174 26 69 1 = 174 27 174 28 18446744073709551615 9 innerText 174 29 174 38 68 1 ; 174 38 174 39 18446744073709551615 4 Util 175 6 175 10 70 2 :: 175 10 175 12 71 4 Trim 175 12 175 16 71 1 ( 175 16 175 17 71 8 testText 175 18 175 26 69 1 ) 175 27 175 28 71 1 ; 175 28 175 29 18446744073709551615 5 const 177 9 177 14 18446744073709551615 3 std 177 15 177 18 5 2 :: 177 18 177 20 18446744073709551615 6 string 177 20 177 26 7 1 & 177 27 177 28 18446744073709551615 4 text 177 28 177 32 72 1 = 177 33 177 34 18446744073709551615 4 Util 177 35 177 39 70 2 :: 177 39 177 41 73 12 DecodeBase64 177 41 177 53 73 1 ( 177 53 177 54 73 8 testText 177 54 177 62 69 1 ) 177 62 177 63 73 1 ; 177 63 177 64 18446744073709551615 56 // Temporary array of gids to be converted to map tiles. 179 9 179 65 18446744073709551615 8 unsigned 180 9 180 17 18446744073709551615 1 * 180 18 180 19 18446744073709551615 3 out 180 19 180 22 74 1 = 180 23 180 24 18446744073709551615 1 0 180 25 180 26 18446744073709551615 1 ; 180 26 180 27 18446744073709551615 2 if 182 9 182 11 18446744073709551615 1 ( 182 12 182 13 18446744073709551615 11 compression 182 13 182 24 14 2 == 182 25 182 27 18446744073709551615 20 TMX_COMPRESSION_ZLIB 182 28 182 48 47 1 ) 182 48 182 49 18446744073709551615 1 { 183 9 183 10 18446744073709551615 75 // Use zlib to uncompress the tile layer into the temporary array of tiles. 184 13 184 88 18446744073709551615 6 uLongf 185 13 185 19 75 6 outlen 185 20 185 26 76 1 = 185 27 185 28 18446744073709551615 5 width 185 29 185 34 38 1 * 185 35 185 36 18446744073709551615 6 height 185 37 185 43 39 1 * 185 44 185 45 18446744073709551615 1 4 185 46 185 47 18446744073709551615 1 ; 185 47 185 48 18446744073709551615 3 out 186 13 186 16 74 1 = 186 17 186 18 18446744073709551615 1 ( 186 19 186 20 18446744073709551615 8 unsigned 186 20 186 28 18446744073709551615 1 * 186 29 186 30 18446744073709551615 1 ) 186 30 186 31 18446744073709551615 6 malloc 186 31 186 37 77 1 ( 186 37 186 38 77 6 outlen 186 38 186 44 76 1 ) 186 44 186 45 77 1 ; 186 45 186 46 18446744073709551615 10 uncompress 187 13 187 23 18446744073709551615 1 ( 187 23 187 24 78 1 ( 188 17 188 18 18446744073709551615 5 Bytef 188 18 188 23 79 1 * 188 23 188 24 18446744073709551615 1 ) 188 24 188 25 18446744073709551615 3 out 188 25 188 28 74 1 , 188 28 188 29 78 1 & 188 30 188 31 18446744073709551615 6 outlen 188 31 188 37 76 1 , 188 37 188 38 78 1 ( 189 17 189 18 18446744073709551615 5 const 189 18 189 23 18446744073709551615 5 Bytef 189 24 189 29 79 1 * 189 29 189 30 18446744073709551615 1 ) 189 30 189 31 18446744073709551615 4 text 189 31 189 35 72 1 . 189 35 189 36 80 5 c_str 189 36 189 41 80 1 ( 189 41 189 42 80 1 ) 189 42 189 43 80 1 , 189 43 189 44 78 4 text 189 45 189 49 72 1 . 189 49 189 50 81 4 size 189 50 189 54 81 1 ( 189 54 189 55 81 1 ) 189 55 189 56 81 1 ) 189 56 189 57 78 1 ; 189 57 189 58 18446744073709551615 1 } 191 9 191 10 18446744073709551615 4 else 192 9 192 13 18446744073709551615 2 if 192 14 192 16 18446744073709551615 1 ( 192 17 192 18 18446744073709551615 11 compression 192 18 192 29 14 2 == 192 30 192 32 18446744073709551615 20 TMX_COMPRESSION_GZIP 192 33 192 53 46 1 ) 192 53 192 54 18446744073709551615 1 { 193 9 193 10 18446744073709551615 60 // Use the utility class for decompressing (which uses zlib) 194 13 194 73 18446744073709551615 3 out 195 13 195 16 74 1 = 195 17 195 18 18446744073709551615 1 ( 195 19 195 20 18446744073709551615 8 unsigned 195 20 195 28 18446744073709551615 1 * 195 29 195 30 18446744073709551615 1 ) 195 30 195 31 18446744073709551615 4 Util 195 31 195 35 70 2 :: 195 35 195 37 82 14 DecompressGZIP 195 37 195 51 82 1 ( 195 51 195 52 82 4 text 196 17 196 21 72 1 . 196 21 196 22 80 5 c_str 196 22 196 27 80 1 ( 196 27 196 28 80 1 ) 196 28 196 29 80 1 , 196 29 196 30 82 4 text 197 17 197 21 72 1 . 197 21 197 22 81 4 size 197 22 197 26 81 1 ( 197 26 197 27 81 1 ) 197 27 197 28 81 1 , 197 28 197 29 82 5 width 198 17 198 22 38 1 * 198 23 198 24 18446744073709551615 6 height 198 25 198 31 39 1 * 198 32 198 33 18446744073709551615 1 4 198 34 198 35 18446744073709551615 1 ) 198 35 198 36 82 1 ; 198 36 198 37 18446744073709551615 1 } 199 9 199 10 18446744073709551615 4 else 200 9 200 13 18446744073709551615 1 { 201 9 201 10 18446744073709551615 3 out 202 13 202 16 74 1 = 202 17 202 18 18446744073709551615 1 ( 202 19 202 20 18446744073709551615 8 unsigned 202 20 202 28 18446744073709551615 1 * 202 29 202 30 18446744073709551615 1 ) 202 30 202 31 18446744073709551615 6 malloc 202 31 202 37 77 1 ( 202 37 202 38 77 4 text 202 38 202 42 72 1 . 202 42 202 43 81 4 size 202 43 202 47 81 1 ( 202 47 202 48 81 1 ) 202 48 202 49 81 1 ) 202 49 202 50 77 1 ; 202 50 202 51 18446744073709551615 48 // Copy every gid into the temporary array since 204 13 204 61 18446744073709551615 53 // the decoded string is an array of 32-bit integers. 205 13 205 66 18446744073709551615 6 memcpy 206 13 206 19 83 1 ( 206 19 206 20 83 3 out 206 20 206 23 74 1 , 206 23 206 24 83 4 text 206 25 206 29 72 1 . 206 29 206 30 80 5 c_str 206 30 206 35 80 1 ( 206 35 206 36 80 1 ) 206 36 206 37 80 1 , 206 37 206 38 83 4 text 206 39 206 43 72 1 . 206 43 206 44 81 4 size 206 44 206 48 81 1 ( 206 48 206 49 81 1 ) 206 49 206 50 81 1 ) 206 50 206 51 83 1 ; 206 51 206 52 18446744073709551615 1 } 207 9 207 10 18446744073709551615 33 // Convert the gids to map tiles. 209 9 209 42 18446744073709551615 3 for 210 9 210 12 18446744073709551615 1 ( 210 13 210 14 18446744073709551615 3 int 210 14 210 17 18446744073709551615 1 x 210 18 210 19 84 1 = 210 20 210 21 18446744073709551615 1 0 210 22 210 23 18446744073709551615 1 ; 210 23 210 24 18446744073709551615 1 x 210 25 210 26 84 1 < 210 27 210 28 18446744073709551615 5 width 210 29 210 34 38 1 ; 210 34 210 35 18446744073709551615 1 x 210 36 210 37 84 2 ++ 210 37 210 39 18446744073709551615 1 ) 210 39 210 40 18446744073709551615 1 { 211 9 211 10 18446744073709551615 3 for 212 13 212 16 18446744073709551615 1 ( 212 17 212 18 18446744073709551615 3 int 212 18 212 21 18446744073709551615 1 y 212 22 212 23 85 1 = 212 24 212 25 18446744073709551615 1 0 212 26 212 27 18446744073709551615 1 ; 212 27 212 28 18446744073709551615 1 y 212 29 212 30 85 1 < 212 31 212 32 18446744073709551615 6 height 212 33 212 39 39 1 ; 212 39 212 40 18446744073709551615 1 y 212 41 212 42 85 2 ++ 212 42 212 44 18446744073709551615 1 ) 212 44 212 45 18446744073709551615 1 { 213 13 213 14 18446744073709551615 8 unsigned 214 17 214 25 18446744073709551615 3 gid 214 26 214 29 86 1 = 214 30 214 31 18446744073709551615 3 out 214 32 214 35 74 1 [ 214 35 214 36 18446744073709551615 1 y 214 36 214 37 85 1 * 214 38 214 39 18446744073709551615 5 width 214 40 214 45 38 1 + 214 46 214 47 18446744073709551615 1 x 214 48 214 49 84 1 ] 214 49 214 50 18446744073709551615 1 ; 214 50 214 51 18446744073709551615 26 // Find the tileset index. 216 17 216 43 18446744073709551615 5 const 217 17 217 22 18446744073709551615 3 int 217 23 217 26 18446744073709551615 12 tilesetIndex 217 27 217 39 87 1 = 217 40 217 41 18446744073709551615 3 map 217 42 217 45 60 2 -> 217 45 217 47 61 16 FindTilesetIndex 217 47 217 63 61 1 ( 217 63 217 64 61 3 gid 217 64 217 67 86 1 ) 217 67 217 68 61 1 ; 217 68 217 69 18446744073709551615 2 if 218 17 218 19 18446744073709551615 1 ( 218 20 218 21 18446744073709551615 12 tilesetIndex 218 21 218 33 87 2 != 218 34 218 36 18446744073709551615 1 - 218 37 218 38 18446744073709551615 1 1 218 38 218 39 18446744073709551615 1 ) 218 39 218 40 18446744073709551615 1 { 219 17 219 18 18446744073709551615 50 // If valid, set up the map tile with the tileset. 220 21 220 71 18446744073709551615 5 const 221 21 221 26 18446744073709551615 3 Tmx 221 27 221 30 0 2 :: 221 30 221 32 18446744073709551615 7 Tileset 221 32 221 39 62 1 * 221 39 221 40 18446744073709551615 7 tileset 221 41 221 48 88 1 = 221 49 221 50 18446744073709551615 3 map 221 51 221 54 60 2 -> 221 54 221 56 64 10 GetTileset 221 56 221 66 64 1 ( 221 66 221 67 64 12 tilesetIndex 221 67 221 79 87 1 ) 221 79 221 80 64 1 ; 221 80 221 81 18446744073709551615 8 tile_map 222 21 222 29 11 1 [ 222 29 222 30 18446744073709551615 1 y 222 30 222 31 85 1 * 222 32 222 33 18446744073709551615 5 width 222 34 222 39 38 1 + 222 40 222 41 18446744073709551615 1 x 222 42 222 43 84 1 ] 222 43 222 44 18446744073709551615 1 = 222 45 222 46 65 7 MapTile 222 47 222 54 37 1 ( 222 54 222 55 37 3 gid 222 55 222 58 86 1 , 222 58 222 59 37 7 tileset 222 60 222 67 88 2 -> 222 67 222 69 66 11 GetFirstGid 222 69 222 80 66 1 ( 222 80 222 81 66 1 ) 222 81 222 82 66 1 , 222 82 222 83 37 12 tilesetIndex 222 84 222 96 87 1 ) 222 96 222 97 37 1 ; 222 97 222 98 18446744073709551615 1 } 223 17 223 18 18446744073709551615 4 else 224 17 224 21 18446744073709551615 1 { 225 17 225 18 18446744073709551615 27 // Otherwise, make it null. 226 21 226 48 18446744073709551615 8 tile_map 227 21 227 29 11 1 [ 227 29 227 30 18446744073709551615 1 y 227 30 227 31 85 1 * 227 32 227 33 18446744073709551615 5 width 227 34 227 39 38 1 + 227 40 227 41 18446744073709551615 1 x 227 42 227 43 84 1 ] 227 43 227 44 18446744073709551615 1 = 227 45 227 46 65 7 MapTile 227 47 227 54 37 1 ( 227 54 227 55 37 3 gid 227 55 227 58 86 1 , 227 58 227 59 37 1 0 227 60 227 61 18446744073709551615 1 , 227 61 227 62 37 1 - 227 63 227 64 18446744073709551615 1 1 227 64 227 65 18446744073709551615 1 ) 227 65 227 66 37 1 ; 227 66 227 67 18446744073709551615 1 } 228 17 228 18 18446744073709551615 1 } 229 13 229 14 18446744073709551615 1 } 230 9 230 10 18446744073709551615 40 // Free the temporary array from memory. 232 9 232 49 18446744073709551615 4 free 233 9 233 13 89 1 ( 233 13 233 14 89 3 out 233 14 233 17 74 1 ) 233 17 233 18 89 1 ; 233 18 233 19 18446744073709551615 1 } 234 5 234 6 18446744073709551615 4 void 236 5 236 9 18446744073709551615 9 TileLayer 236 10 236 19 1 2 :: 236 19 236 21 51 8 ParseCSV 236 21 236 29 51 1 ( 236 29 236 30 51 5 const 236 30 236 35 18446744073709551615 3 std 236 36 236 39 5 2 :: 236 39 236 41 18446744073709551615 6 string 236 41 236 47 7 1 & 236 48 236 49 18446744073709551615 9 innerText 236 49 236 58 90 1 ) 236 58 236 59 51 1 { 237 5 237 6 18446744073709551615 45 // Duplicate the string for use with C stdio. 238 9 238 54 18446744073709551615 4 char 239 9 239 13 18446744073709551615 1 * 239 14 239 15 18446744073709551615 3 csv 239 15 239 18 91 1 = 239 19 239 20 18446744073709551615 6 strdup 239 21 239 27 92 1 ( 239 27 239 28 92 9 innerText 239 28 239 37 90 1 . 239 37 239 38 80 5 c_str 239 38 239 43 80 1 ( 239 43 239 44 80 1 ) 239 44 239 45 80 1 ) 239 45 239 46 92 1 ; 239 46 239 47 18446744073709551615 56 // Iterate through every token of ';' in the CSV string. 241 9 241 65 18446744073709551615 4 char 242 9 242 13 18446744073709551615 1 * 242 14 242 15 18446744073709551615 3 pch 242 15 242 18 93 1 = 242 19 242 20 18446744073709551615 6 strtok 242 21 242 27 94 1 ( 242 27 242 28 94 3 csv 242 28 242 31 91 1 , 242 31 242 32 94 3 "," 242 33 242 36 18446744073709551615 1 ) 242 36 242 37 94 1 ; 242 37 242 38 18446744073709551615 3 int 243 9 243 12 18446744073709551615 9 tileCount 243 13 243 22 95 1 = 243 23 243 24 18446744073709551615 1 0 243 25 243 26 18446744073709551615 1 ; 243 26 243 27 18446744073709551615 5 while 245 9 245 14 18446744073709551615 1 ( 245 15 245 16 18446744073709551615 3 pch 245 16 245 19 93 1 ) 245 19 245 20 18446744073709551615 1 { 246 9 246 10 18446744073709551615 8 unsigned 247 13 247 21 18446744073709551615 3 gid 247 22 247 25 96 1 ; 247 25 247 26 18446744073709551615 6 sscanf 248 13 248 19 58 1 ( 248 19 248 20 58 3 pch 248 20 248 23 93 1 , 248 23 248 24 58 4 "%u" 248 25 248 29 18446744073709551615 1 , 248 29 248 30 58 1 & 248 31 248 32 18446744073709551615 3 gid 248 32 248 35 96 1 ) 248 35 248 36 58 1 ; 248 36 248 37 18446744073709551615 26 // Find the tileset index. 250 13 250 39 18446744073709551615 5 const 251 13 251 18 18446744073709551615 3 int 251 19 251 22 18446744073709551615 12 tilesetIndex 251 23 251 35 97 1 = 251 36 251 37 18446744073709551615 3 map 251 38 251 41 60 2 -> 251 41 251 43 61 16 FindTilesetIndex 251 43 251 59 61 1 ( 251 59 251 60 61 3 gid 251 60 251 63 96 1 ) 251 63 251 64 61 1 ; 251 64 251 65 18446744073709551615 2 if 252 13 252 15 18446744073709551615 1 ( 252 16 252 17 18446744073709551615 12 tilesetIndex 252 17 252 29 97 2 != 252 30 252 32 18446744073709551615 1 - 252 33 252 34 18446744073709551615 1 1 252 34 252 35 18446744073709551615 1 ) 252 35 252 36 18446744073709551615 1 { 253 13 253 14 18446744073709551615 50 // If valid, set up the map tile with the tileset. 254 17 254 67 18446744073709551615 5 const 255 17 255 22 18446744073709551615 3 Tmx 255 23 255 26 0 2 :: 255 26 255 28 18446744073709551615 7 Tileset 255 28 255 35 62 1 * 255 35 255 36 18446744073709551615 7 tileset 255 37 255 44 98 1 = 255 45 255 46 18446744073709551615 3 map 255 47 255 50 60 2 -> 255 50 255 52 64 10 GetTileset 255 52 255 62 64 1 ( 255 62 255 63 64 12 tilesetIndex 255 63 255 75 97 1 ) 255 75 255 76 64 1 ; 255 76 255 77 18446744073709551615 8 tile_map 256 17 256 25 11 1 [ 256 25 256 26 18446744073709551615 9 tileCount 256 26 256 35 95 1 ] 256 35 256 36 18446744073709551615 1 = 256 37 256 38 65 7 MapTile 256 39 256 46 37 1 ( 256 46 256 47 37 3 gid 256 47 256 50 96 1 , 256 50 256 51 37 7 tileset 256 52 256 59 98 2 -> 256 59 256 61 66 11 GetFirstGid 256 61 256 72 66 1 ( 256 72 256 73 66 1 ) 256 73 256 74 66 1 , 256 74 256 75 37 12 tilesetIndex 256 76 256 88 97 1 ) 256 88 256 89 37 1 ; 256 89 256 90 18446744073709551615 1 } 257 13 257 14 18446744073709551615 4 else 258 13 258 17 18446744073709551615 1 { 259 13 259 14 18446744073709551615 27 // Otherwise, make it null. 260 17 260 44 18446744073709551615 8 tile_map 261 17 261 25 11 1 [ 261 25 261 26 18446744073709551615 9 tileCount 261 26 261 35 95 1 ] 261 35 261 36 18446744073709551615 1 = 261 37 261 38 65 7 MapTile 261 39 261 46 37 1 ( 261 46 261 47 37 3 gid 261 47 261 50 96 1 , 261 50 261 51 37 1 0 261 52 261 53 18446744073709551615 1 , 261 53 261 54 37 1 - 261 55 261 56 18446744073709551615 1 1 261 56 261 57 18446744073709551615 1 ) 261 57 261 58 37 1 ; 261 58 261 59 18446744073709551615 1 } 262 13 262 14 18446744073709551615 3 pch 264 13 264 16 93 1 = 264 17 264 18 18446744073709551615 6 strtok 264 19 264 25 94 1 ( 264 25 264 26 94 4 NULL 264 26 264 30 94 1 , 264 30 264 31 94 3 "," 264 32 264 35 18446744073709551615 1 ) 264 35 264 36 94 1 ; 264 36 264 37 18446744073709551615 9 tileCount 265 13 265 22 95 2 ++ 265 22 265 24 18446744073709551615 1 ; 265 24 265 25 18446744073709551615 1 } 266 9 266 10 18446744073709551615 4 free 268 9 268 13 89 1 ( 268 13 268 14 89 3 csv 268 14 268 17 91 1 ) 268 17 268 18 89 1 ; 268 18 268 19 18446744073709551615 1 } 269 5 269 6 18446744073709551615 1 } 270 1 270 2 18446744073709551615 0 0 99 0 0 0 22 0 0 1 3 0 3 Tmx 4 1 3 0 13 TileLayer:Tmx 4 1 3 0 7 Map:Tmx 10 1 3 0 103 45:37:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 4 1 3 0 9 Layer:Tmx 22 1 3 0 3 std 24 1 3 0 24 basic_string:__cxx11:std 20 1 3 0 18 string:__cxx11:std 21 1 3 0 16 GetWidth:Map:Tmx 21 1 3 0 17 GetHeight:Map:Tmx 7 1 3 0 32 TMX_LAYERTYPE_TILE:LayerType:Tmx 6 1 3 0 22 tile_map:TileLayer:Tmx 6 1 3 0 22 encoding:TileLayer:Tmx 7 1 3 0 42 TMX_ENCODING_XML:TileLayerEncodingType:Tmx 6 1 3 0 25 compression:TileLayer:Tmx 7 1 3 0 49 TMX_COMPRESSION_NONE:TileLayerCompressionType:Tmx 21 2 3 0 15 Parse:Layer:Tmx 19 Parse:TileLayer:Tmx 22 1 3 0 8 tinyxml2 4 1 3 0 16 XMLNode:tinyxml2 10 1 3 0 103 63:52:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 4 1 3 0 19 XMLElement:tinyxml2 9 1 3 0 103 65:37:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 21 1 3 0 26 ToElement:XMLNode:tinyxml2 6 1 3 0 14 name:Layer:Tmx 21 1 3 0 34 operator=:basic_string:__cxx11:std 21 1 3 0 29 Attribute:XMLElement:tinyxml2 21 1 3 0 37 QueryIntAttribute:XMLElement:tinyxml2 6 1 3 0 11 x:Layer:Tmx 6 1 3 0 11 y:Layer:Tmx 21 1 3 0 39 QueryFloatAttribute:XMLElement:tinyxml2 6 1 3 0 17 opacity:Layer:Tmx 21 1 3 0 38 QueryBoolAttribute:XMLElement:tinyxml2 6 1 3 0 17 visible:Layer:Tmx 9 1 3 0 103 77:34:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 21 1 3 0 34 FirstChildElement:XMLNode:tinyxml2 6 1 3 0 20 properties:Layer:Tmx 21 1 3 0 21 Parse:PropertySet:Tmx 2 1 3 0 11 MapTile:Tmx 6 1 3 0 15 width:Layer:Tmx 6 1 3 0 16 height:Layer:Tmx 9 1 3 0 103 87:37:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 103 89:21:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 103 90:21:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 8 1 3 0 6 strcmp 7 1 3 0 45 TMX_ENCODING_BASE64:TileLayerEncodingType:Tmx 7 1 3 0 42 TMX_ENCODING_CSV:TileLayerEncodingType:Tmx 7 1 3 0 49 TMX_COMPRESSION_GZIP:TileLayerCompressionType:Tmx 7 1 3 0 49 TMX_COMPRESSION_ZLIB:TileLayerCompressionType:Tmx 21 1 3 0 22 ParseXML:TileLayer:Tmx 21 1 3 0 25 ParseBase64:TileLayer:Tmx 21 1 3 0 27 GetText:XMLElement:tinyxml2 21 1 3 0 22 ParseCSV:TileLayer:Tmx 10 1 3 0 104 135:55:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 137:34:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 138:13:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 142:41:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 144:22:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 147:25:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 8 1 3 0 6 sscanf 9 1 3 0 104 153:23:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 6 1 3 0 13 map:Layer:Tmx 21 1 3 0 24 FindTilesetIndex:Map:Tmx 4 1 3 0 11 Tileset:Tmx 9 1 3 0 104 157:37:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 21 1 3 0 18 GetTileset:Map:Tmx 21 1 3 0 21 operator=:MapTile:Tmx 21 1 3 0 23 GetFirstGid:Tileset:Tmx 21 1 3 0 35 NextSiblingElement:XMLNode:tinyxml2 10 1 3 0 104 172:52:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 174:18:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 22 1 3 0 8 Util:Tmx 8 1 3 0 13 Trim:Util:Tmx 9 1 3 0 104 177:28:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 8 1 3 0 21 DecodeBase64:Util:Tmx 9 1 3 0 104 180:19:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 20 1 3 0 6 uLongf 9 1 3 0 104 185:20:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 8 1 3 0 6 malloc 8 1 3 0 13 mz_uncompress 20 1 3 0 5 Bytef 21 1 3 0 30 c_str:basic_string:__cxx11:std 21 1 3 0 29 size:basic_string:__cxx11:std 8 1 3 0 23 DecompressGZIP:Util:Tmx 8 1 3 0 6 memcpy 9 1 3 0 104 210:18:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 212:22:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 214:26:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 217:27:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 221:41:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 8 1 3 0 4 free 10 1 3 0 104 236:49:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 239:15:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 8 1 3 0 6 strdup 9 1 3 0 104 242:15:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 8 1 3 0 6 strtok 9 1 3 0 104 243:13:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 247:22:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 251:23:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 9 1 3 0 104 255:37:/home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 0 0 12 0 0 0 95 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/include/TmxColor.h 1571011913 95 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/include/TmxLayer.h 1571011913 93 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/include/TmxMap.h 1571011913 97 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/include/TmxMapTile.h 1571011913 98 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/include/TmxProperty.h 1571011913 101 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/include/TmxPropertySet.h 1571011913 99 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/include/TmxTileLayer.h 1571011913 97 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/include/TmxTileset.h 1571011913 94 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/include/TmxUtil.h 1571011913 95 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/include/tinyxml2.h 1565485553 97 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/TmxTileLayer.cpp 1571011913 88 /home/hardebayho/Gamez/Allegro5TiledRenderer/Allegro5TiledRenderer/tmxparser/src/miniz.c 1571011913